// Generated by gencpp from file tracking_server_msgs/handSkeleton.msg
// DO NOT EDIT!


#ifndef TRACKING_SERVER_MSGS_MESSAGE_HANDSKELETON_H
#define TRACKING_SERVER_MSGS_MESSAGE_HANDSKELETON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>

namespace tracking_server_msgs
{
template <class ContainerAllocator>
struct handSkeleton_
{
  typedef handSkeleton_<ContainerAllocator> Type;

  handSkeleton_()
    : header()
    , params()
    , bones()
    , features()  {
    }
  handSkeleton_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , params(_alloc)
    , bones(_alloc)
    , features(_alloc)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _params_type;
  _params_type params;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _bones_type;
  _bones_type bones;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _features_type;
  _features_type features;




  typedef boost::shared_ptr< ::tracking_server_msgs::handSkeleton_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tracking_server_msgs::handSkeleton_<ContainerAllocator> const> ConstPtr;

}; // struct handSkeleton_

typedef ::tracking_server_msgs::handSkeleton_<std::allocator<void> > handSkeleton;

typedef boost::shared_ptr< ::tracking_server_msgs::handSkeleton > handSkeletonPtr;
typedef boost::shared_ptr< ::tracking_server_msgs::handSkeleton const> handSkeletonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tracking_server_msgs::handSkeleton_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tracking_server_msgs::handSkeleton_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tracking_server_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'tracking_server_msgs': ['/home/ehlers/ros-indigo-workspace/src/tracking_and_gesture_stack/tracking_server_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tracking_server_msgs::handSkeleton_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tracking_server_msgs::handSkeleton_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tracking_server_msgs::handSkeleton_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tracking_server_msgs::handSkeleton_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tracking_server_msgs::handSkeleton_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tracking_server_msgs::handSkeleton_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tracking_server_msgs::handSkeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3339cf4719b07fe0482e27cae28d571d";
  }

  static const char* value(const ::tracking_server_msgs::handSkeleton_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3339cf4719b07fe0ULL;
  static const uint64_t static_value2 = 0x482e27cae28d571dULL;
};

template<class ContainerAllocator>
struct DataType< ::tracking_server_msgs::handSkeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tracking_server_msgs/handSkeleton";
  }

  static const char* value(const ::tracking_server_msgs::handSkeleton_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tracking_server_msgs::handSkeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message containing all necessary skeleton information \n\
\n\
# Attention: The thumb is modeled as a normal finger with the same joints except a little translation \n\
# before (=> additional bone parameter) hand and a rotation of MCP1 about 45 degrees respective hands basic coordinate system\n\
\n\
# Hint: See hand_model.pdf for more information about the coordinate systems. \n\
# It shows the view onto the back of the hand\n\
\n\
Header header\n\
\n\
# Pose parameters - array of 26 values\n\
# Yaw Pitch Roll X Y Z followed by the finger angles from the little finger to the thumb\n\
# there are four angles for each finger\n\
# Metacarpophalangeal joint is subdivided into two joints for every motion\n\
# [MCP1] - abduction (negative angle) and adduction (positive angle)\n\
# [MCP2] - felxion (negative angle) and extension (positive angle)\n\
# Proximal Interphalangeal joint [PIP] - felxion (negative angle) and extension (positive angle)\n\
# Distal Interphalangeal joint [DIP] - felxion (negative angle) and extension (positive angle)\n\
#\n\
# For an easier acces to the values you can use the Hand::Parameter enums defined in include/trackings_server_msgs/enums.h\n\
float64[] params\n\
\n\
# Bone information - array of 26 values\n\
# 5 values for every finger from the little finger to the thumb\n\
# translations of MCP1 along x and y axis according the basic hand coordinate system\n\
# followed by the bone length of the phalanx proximalis, phalanx media and phalanx distalis\n\
#\n\
# For an easier acces to the values you can use the Hand::BoneParameter enums defined in include/trackings_server_msgs/enums.h\n\
float64[] bones\n\
\n\
geometry_msgs/Vector3[] features\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::tracking_server_msgs::handSkeleton_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tracking_server_msgs::handSkeleton_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.params);
      stream.next(m.bones);
      stream.next(m.features);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct handSkeleton_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tracking_server_msgs::handSkeleton_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tracking_server_msgs::handSkeleton_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "params[]" << std::endl;
    for (size_t i = 0; i < v.params.size(); ++i)
    {
      s << indent << "  params[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.params[i]);
    }
    s << indent << "bones[]" << std::endl;
    for (size_t i = 0; i < v.bones.size(); ++i)
    {
      s << indent << "  bones[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bones[i]);
    }
    s << indent << "features[]" << std::endl;
    for (size_t i = 0; i < v.features.size(); ++i)
    {
      s << indent << "  features[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.features[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRACKING_SERVER_MSGS_MESSAGE_HANDSKELETON_H
